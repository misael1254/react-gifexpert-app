{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GrifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","setCategory","categories","setCategories","categoriesByProps","useState","categoryInput","setcategoryInput","addCategory","event","trim","exist","find","category","console","log","undefined","cats","alert","onSubmit","e","preventDefault","id","type","value","placeholder","onChange","target","onKeyPress","onClick","getGifs","a","url","fetch","resp","json","data","giph","map","element","title","imgURL","images","downsized","GrifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","imgObj","GifExpertApp","i","ReactDOM","render","document","getElementById"],"mappings":"+MAkEeA,EA9DK,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,YAAYC,EAAgB,EAAhBA,WACvBC,EAAgBF,EAChBG,EAAoBF,EAFmB,EAGJG,mBAAS,IAHL,mBAGvCC,EAHuC,KAGxBC,EAHwB,KAWxCC,EAAc,SAACC,GACjB,GAA4B,KAAzBH,EAAcI,OAAc,CAC3B,IAAMC,EAAQP,EAAkBQ,MAAK,SAAAC,GAAQ,OAAIA,IAAaP,KAC9DQ,QAAQC,IAAIJ,QACCK,IAAVL,GAGCR,GAAc,SAAAc,GAAQ,MAAM,CAAEX,GAAR,mBAAyBW,OAC/CV,EAAiB,KAGbW,MAAM,kCAIdA,MAAM,4BAId,OACI,qCACA,kDACA,uBAAMC,SA5BW,SAAEC,GACnBA,EAAEC,iBAEFb,EAAYY,IAyBZ,UACI,uBACIE,GAAG,WACHC,KAAK,OACLC,MAAOlB,EACPmB,YAAY,mBACZC,SACI,SAACN,GACAb,EAAiBa,EAAEO,OAAOH,QAG/BI,WACI,SAAAR,OAMR,wBAAQG,KAAK,SAASM,QAASrB,EAA/B,iC,+BCvDCsB,EAAO,uCAAE,kDAAAC,EAAA,6DAAMlB,EAAN,+BAAiB,WAE7BmB,EAFY,uDACH,mCADG,cAEsDnB,EAFtD,+BAIIoB,MAAMD,GAJV,cAITE,EAJS,gBAKMA,EAAKC,OALX,uBAKRC,EALQ,EAKRA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAY,IAAD,EAC7B,MAAO,CACHjB,GAAIiB,EAAQjB,GACZkB,MAAOD,EAAQC,MACfC,OAAM,UAAGF,EAAQG,cAAX,aAAG,EAAgBC,cAXnB,kBAcRN,GAdQ,yCAiBdvB,QAAQC,IAAR,MAjBc,kBAkBP,IAlBO,0DAAF,qDCEL,SAAS6B,EAAT,GAAsD,IAAftB,EAAc,EAAdA,GAAImB,EAAU,EAAVA,OACtD,OAMI,aAJA,CAIA,OAAcI,UAAU,uDAAxB,SACA,qBAAKC,IAAKL,EAAOT,IAAKe,IAAKzB,KADjBA,GCJX,IAAM0B,EAAU,SAAC,GAA8B,IAAD,IAA5BnC,gBAA4B,MAAjB,YAAiB,ICFzB,SAACA,GAAY,IAAD,EACVR,mBAAS,CAC/B+B,KAAK,GACLa,SAAQ,IAHwB,mBAC7BC,EAD6B,KACtBC,EADsB,KAkBpC,OAXAC,qBAAU,WACNtB,EAAQjB,GAAUwC,MAAK,SAAAC,GAAI,OAAIH,EAAS,CACpCf,KAAKkB,EACLL,SAAQ,SAGb,CAACpC,IAKGqC,EDbuBK,CAAa1C,GAA/B6B,EAHqC,EAG1CN,KAAYa,EAH8B,EAG9BA,QAWnB,OACI,qCACA,6BAAKpC,IAEJoC,GAAW,WACZ,qBAAKJ,UAAU,YAAf,SACKH,EAAOJ,KAAI,SAAAkB,GACR,GAAGA,EAAOlC,GACN,OAAO,cAACsB,EAAD,eAAkCY,GAAfA,EAAOlC,aEoDtCmC,EA3EM,WAAI,MAEepD,mBAAS,CAAC,cAFzB,mBAEdH,EAFc,KAEFC,EAFE,OAGqBE,mBAAS,IAH9B,6BAqCrB,OACI,qCAEI,8CACA,cAAC,EAAD,CAAaJ,YAAaE,EAAeD,WAAYA,IACrD,uBACA,4EACA,6BACKA,EAAWoC,KAAI,SAACC,EAAQmB,GACrB,OAAO,cAAC,EAAD,CAAuB7C,SAAU0B,GAAnBA,QAI7B,uBAmBA,uBACA,iFCrEZoB,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.46799012.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n// puedo user ( props )=>{} para despues usar props.setCategory\r\nconst AddCategory = ({setCategory,categories}) => {\r\n     const setCategories = setCategory;\r\n     const categoriesByProps = categories;\r\n    const [categoryInput, setcategoryInput] = useState('');\r\n\r\n    const handleSubmit = ( e ) =>{\r\n        e.preventDefault();\r\n        // setCategories(currentCategories => [categoryInput, ...currentCategories]);\r\n        addCategory(e);\r\n    }\r\n\r\n    const addCategory = (event)=>{\r\n        if(categoryInput.trim() !== ''){\r\n            const exist = categoriesByProps.find(category => category === categoryInput);\r\n            console.log(exist);\r\n            if(exist === undefined){\r\n                // const newArray = [...categories,categoryInput];\r\n                // setCategories(newArray);\r\n                setCategories(cats =>{return [categoryInput,...cats]});\r\n                setcategoryInput('');\r\n                \r\n                }else{\r\n                    alert('Category is already exist');\r\n                }\r\n        }\r\n        else{\r\n            alert('Category is not defined');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <h2>Add new category</h2>\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                id=\"category\" \r\n                type=\"text\" \r\n                value={categoryInput}\r\n                placeholder=\"Add new category\" \r\n                onChange={\r\n                    (e)=>{\r\n                     setcategoryInput(e.target.value);\r\n                    }\r\n                }\r\n                onKeyPress={\r\n                    e=>{\r\n                        //  if(e.key === 'Enter')\r\n                        //      addCategory(e)\r\n                    }\r\n                }\r\n            />\r\n            <button type=\"button\" onClick={addCategory}>Add Category</button>\r\n        </form>\r\n        </>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes={\r\n    setCategory: PropTypes.func.isRequired,\r\n}\r\n\r\n\r\nexport default AddCategory\r\n","export const getGifs= async(category = 'onePunch')=>{\r\n    const apiKey = 'IUF5aM1djGu3bNyPeMKSxD363UQkfyFj';\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=${apiKey}&q=${category}&limit=10`;\r\n     try {\r\n       const resp = await fetch(url);\r\n       const {data} = await resp.json();\r\n    //    console.log(data);\r\n       const giph = data.map( element => {\r\n            return {\r\n                id: element.id,\r\n                title: element.title,\r\n                imgURL : element.images?.downsized //se puso el \"?\" para decir que si existe, lo incerte\r\n            }\r\n       });\r\n       return giph;\r\n    //   console.log(giph);\r\n    } catch (error) {\r\n        console.log(error)\r\n        return [];\r\n    }\r\n}","import React from 'react'\r\n\r\nexport default function GrifGridItem(/*{imageObj}*/ { id, imgURL }) {\r\n    return (\r\n        \r\n        // <div key={imageObj.id} className=\"divImages\">\r\n        // <img src={imageObj.imgURL.url} alt={imageObj.id}/>\r\n        // </div>\r\n        \r\n        <div key={id} className=\"divImages card animate__animated animate__fadeInDown\">\r\n        <img src={imgURL.url} alt={id}/>\r\n        </div>\r\n            \r\n        \r\n    )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n// import { getGifs } from '../helpers/getGifs';\r\nimport GrifGridItem from './GrifGridItem';\r\n\r\nexport const GifGrid = ({category = \"One Punch\"}) => {\r\n\r\n    \r\n    const {data:images,loading} = useFetchGifs(category);\r\n\r\n    // const [images, setImages] = useState([]);\r\n    // useEffect(() => {\r\n    //     getGifs(category).then(imgs => setImages(imgs));\r\n    // }, [category]) \r\n    // el use effect se compone de una función que voy a ejecutar,  y de las dependencias\r\n    // al mandar un array vacío, quiere decir que sólo se ejecutará una vez\r\n\r\n    \r\n    // getGifs();\r\n    return (\r\n        <>\r\n        <h3>{category}</h3>\r\n        {/* {loading ? 'Cargando' : 'Data Cargada'} */}\r\n        {loading && 'Cargando'}\r\n        <div className=\"card-grid\" >\r\n            {images.map(imgObj=>{\r\n                if(imgObj.id){\r\n                    return <GrifGridItem key={imgObj.id} {...imgObj} />\r\n                    // return <GrifGridItem key={imgObj.id} imageObj={imgObj} />\r\n                }\r\n            })}\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category)=>{\r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n\r\n    // const [images, setImages] = useState([]);\r\n    useEffect(() => {\r\n        getGifs(category).then(imgs => setstate({\r\n            data:imgs,\r\n            loading:false\r\n        }));\r\n        // getGifs(category).then(imgs => setImages(imgs));\r\n    }, [category]) \r\n    // el use effect se compone de una función que voy a ejecutar,  y de las dependencias\r\n    // al mandar un array vacío, quiere decir que sólo se ejecutará una vez\r\n\r\n\r\n    return state;//{data:[],loading:true}\r\n\r\n}","import React, { useState } from 'react';\r\nimport AddCategory from './AddCategory';\r\nimport { GifGrid } from './GifGrid';\r\n\r\nconst GifExpertApp = ()=>{\r\n    // const categories = ['One Punch', 'Samuray X', \"Dragon Ball\"];\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n    const [categoryInput, setcategoryInput] = useState('');\r\n    // const series = {\r\n    //     onePonch:{\r\n    //         protagonist:'Saitama',\r\n    //         seassons:2,\r\n    //     },\r\n    //     dragonBall:{\r\n    //         protagonist:'Saitama',\r\n    //         seassons:4,\r\n    //     },\r\n    //     samurayX:{\r\n\r\n    //     },\r\n    // };\r\n\r\n    // const addCategory = (event)=>{\r\n    //     if(categoryInput !== ''){\r\n    //         const exist = categories.find(category => category === categoryInput);\r\n    //         console.log(exist);\r\n    //         if(exist === undefined){\r\n    //             // const newArray = [...categories,categoryInput];\r\n    //             // setCategories(newArray);\r\n    //             setCategories(cats =>{return [categoryInput,...categories]});\r\n    //             setcategoryInput('');\r\n                \r\n    //         }else{\r\n    //             alert('Category is already exist');\r\n    //         }\r\n    //     }\r\n    //     else{\r\n    //         alert('Category is not defined');\r\n    //     }\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            \r\n            <h1>GifExpertApp</h1>\r\n            <AddCategory setCategory={setCategories} categories={categories} />\r\n            <hr/>\r\n            <h3>Este será una iteración con un array</h3>\r\n            <ol>\r\n                {categories.map((element,i) => {\r\n                    return <GifGrid key={element} category={element}></GifGrid>\r\n                    // return <li key={element}>{i} + {element}</li>\r\n                })}\r\n            </ol>\r\n            <br></br>\r\n            {/*<input \r\n                id=\"category\" \r\n                type=\"text\" \r\n                value={categoryInput}\r\n                placeholder=\"Add new category\" \r\n                onChange={\r\n                    (e)=>{\r\n                    setcategoryInput(e.target.value);\r\n                    }\r\n                }\r\n                onKeyPress={\r\n                    e=>{\r\n                        if(e.key === 'Enter')\r\n                            addCategory(e)\r\n                    }\r\n                }\r\n            />*/}\r\n            {/* <button onClick={addCategory}>Add Category</button> */}\r\n            <br></br>\r\n            <h3>Este será una iteración con un objeto</h3>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './components/GifExpertApp'\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}